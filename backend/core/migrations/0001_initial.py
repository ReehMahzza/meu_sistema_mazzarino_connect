# Generated by Django 5.2.4 on 2025-07-18 10:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True)),
                ('telefone', models.CharField(blank=True, max_length=20, null=True)),
                ('setor_ou_equipe', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_type', models.CharField(choices=[('analysis', 'Analysis'), ('negotiation', 'Negotiation'), ('liquidation', 'Liquidation')], max_length=50)),
                ('case_description', models.TextField(default='Aguardando descrição')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=50)),
                ('ia_analysis_result', models.TextField(blank=True, null=True)),
                ('human_analysis_result', models.TextField(blank=True, null=True)),
                ('technical_report_content', models.TextField(blank=True, null=True)),
                ('proposal_sent_date', models.DateField(blank=True, null=True)),
                ('client_decision', models.CharField(blank=True, max_length=100, null=True)),
                ('dossier_sent_date', models.DateField(blank=True, null=True)),
                ('bank_response_status', models.CharField(blank=True, max_length=100, null=True)),
                ('counterproposal_details', models.TextField(blank=True, null=True)),
                ('final_agreement_sent_date', models.DateField(blank=True, null=True)),
                ('bank_payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed')], default='pending', max_length=50)),
                ('docusign_status', models.CharField(blank=True, max_length=100, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='core.actor')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255, verbose_name='Nome do Arquivo')),
                ('file_type', models.CharField(max_length=50, verbose_name='Tipo do Arquivo')),
                ('file_url', models.URLField(max_length=1024, verbose_name='URL do Arquivo')),
                ('upload_date', models.DateTimeField(auto_now_add=True, verbose_name='Data de Upload')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrição do Documento')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.case', verbose_name='Caso')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL, verbose_name='Enviado por')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(max_length=50, verbose_name='Tipo de Movimento')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Data e Hora')),
                ('from_sector', models.CharField(blank=True, max_length=100, null=True, verbose_name='Do Setor')),
                ('to_sector', models.CharField(blank=True, max_length=100, null=True, verbose_name='Para o Setor')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Conteúdo/Despacho')),
                ('is_internal', models.BooleanField(default=True, verbose_name='Movimento Interno')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Anotações Internas')),
                ('request_details', models.TextField(blank=True, null=True, verbose_name='Detalhes da Solicitação de Serviço')),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements', to=settings.AUTH_USER_MODEL, verbose_name='Ator')),
                ('associated_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements', to='core.document', verbose_name='Documento Associado')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='core.case', verbose_name='Caso')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
    ]
